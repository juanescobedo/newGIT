package com.hcl.usaa.timesheet.bean;

// Generated 9/04/2014 04:48:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import com.hcl.usaa.timesheet.hibernate.util.HibernateUtil;

/**
 * BussinesLine generated by hbm2java
 */
@Entity
@Table(name = "bussines_line", catalog = "timesheet")
public class BussinesLine implements java.io.Serializable {

	private static final long SerialVersionUID = 1L;
	@Id
	@GeneratedValue
	@Column(name = "idbusinessline")
	private Integer idbusinessline;
	@Column(name = "businessline")
	private String businessline;
	@Column(name = "active")
	private Boolean active;
	
	public BussinesLine(){
		
	}
	
	public BussinesLine(Integer idbusinessline, String businessline,
			Boolean active) {
		super();
		this.idbusinessline = idbusinessline;
		this.businessline = businessline;
		this.active = active;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		sb.append("idBussinesLines : ").append(getIdbusinessline());
		sb.append("BussinesLines : ").append(getBusinessline());
		sb.append("]");
		return sb.toString();
	}

	public BussinesLine getById(Integer id) {
		BussinesLine u = null;
       try {
    	   Session session=HibernateUtil.getDBSession();
	       HibernateUtil.beginTransaction();
	       Criteria c=session.createCriteria(getClass());
	       c.add(Restrictions.eq("idbusinessline", id));
	       c.add(Restrictions.eq("active", Boolean.TRUE));
	       u=(BussinesLine) c.uniqueResult();
           HibernateUtil.commitTransaction();
       } catch (Exception e) {
    	   e.printStackTrace();
    	   String err="An error occurs while try to get elements";
    	   System.err.println(err);
       }finally{
    	   //HibernateUtil.closeSession();
       }
       return u;
	}


	@Override
	public boolean equals(Object c) {
		BussinesLine t = this;
		boolean bRet = false;
		if (!(c instanceof BussinesLine)) {
			return false;
		}
		BussinesLine x = (BussinesLine) c;
		if (x != null && x.getIdbusinessline().equals(t.getIdbusinessline())) {
			bRet = true;
		}
		return bRet;
	}

	public List<BussinesLine> getAllBussinesLine() {
		return getList(0, 0, true);

	}

	public Integer getIdbusinessline() {
		return idbusinessline;
	}

	public String getBusinessline() {
		return businessline;
	}

	public Boolean getActive() {
		return active;
	}

	public void setIdbusinessline(Integer idbusinessline) {
		this.idbusinessline = idbusinessline;
	}

	public void setBusinessline(String businessline) {
		this.businessline = businessline;
	}

	public void setActive(Boolean actie) {
		this.active = actie;
	}

	public List<BussinesLine> getList(int firstResult, int maxResult) {
		return getList(firstResult, maxResult, false);
	}

	private List<BussinesLine> getList(int firstResult, int maxResult, boolean all) {
		List<BussinesLine> lRet = new ArrayList<BussinesLine>();
		Session session = null;
		//Query q = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			//q = session.createQuery("from BussinessLine");
			Criteria c=session.createCriteria(getClass());
			c.add(Restrictions.eq("active", Boolean.TRUE));
			if (!all) {
				c.setFirstResult(firstResult);
				c.setMaxResults(maxResult);
			}
			lRet = c.list();
			HibernateUtil.commitTransaction();
		} catch (Exception e) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to get BussinesLines elements");
			System.out.println(e);
		} finally {
			HibernateUtil.closeSession();
		}
		return lRet;
	}

	public boolean save() {
		boolean bRet = false;
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			session.save(this);
			HibernateUtil.commitTransaction();
			bRet = true;
		} catch (Exception ex) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to save current element");
			System.out.println(ex);
		} finally {
			HibernateUtil.closeSession();
		}
		return bRet;
	}

	public boolean update() {
		boolean bRet = false;
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			session.update(this);
			HibernateUtil.commitTransaction();
			bRet = true;
		} catch (Exception ex) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to update current object");
		} finally {
			HibernateUtil.closeSession();
		}
		return bRet;
	}

	public boolean delete() {
		boolean bRet = false;
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			setActive(Boolean.FALSE);
			session.update(this);
			HibernateUtil.commitTransaction();
			bRet = true;
		} catch (Exception ex) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to delete current object");
		} finally {
			HibernateUtil.closeSession();
		}
		return bRet;
	}
	
}
