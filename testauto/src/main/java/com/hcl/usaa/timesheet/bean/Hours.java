package com.hcl.usaa.timesheet.bean;

// Generated 9/04/2014 04:48:16 PM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.OneToMany;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import com.hcl.usaa.timesheet.hibernate.util.HibernateUtil;

/**
 * Hours generated by hbm2java
 */
@Entity
@Table(name = "hours", catalog = "timesheet")
public class Hours implements java.io.Serializable {

	private static final long SerialVersionUID = 1L;
	
	@Id
	@GeneratedValue
	@Column(name = "idhours")
	private Integer idhours;
	
	@Column(name = "monday")
	private Integer monday;
	
	@Column(name = "thuesday")
	private Integer thuesday;
	
	@Column(name = "wednesday")
	private Integer wednesday;
	
	@Column(name = "thursday")
	private Integer thursday;
	
	@Column(name = "friday")
	private Integer friday;
	
	@Column(name = "active")
	private Boolean active;
	
	@Column(name = "status")
	private Boolean status;
		
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idtimesheet", nullable = false)
	private Timesheet timesheet;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idBucket", nullable = false)
	private Bucket bucket;
	
	public Hours(Integer idhours, Integer monday, Integer thuesday,
			Integer wednesday, Integer thursday, Integer friday,
			Boolean active, Boolean status, Timesheet timesheet, Bucket bucket) {
		super();
		this.idhours = idhours;
		this.monday = monday;
		this.thuesday = thuesday;
		this.wednesday = wednesday;
		this.thursday = thursday;
		this.friday = friday;
		this.active = active;
		this.status = status;
		this.timesheet = timesheet;
		this.bucket = bucket;
	}
	
	public Hours(){
		
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		sb.append("]");
		return sb.toString();
	}

	public Hours getById(Integer id) {
		Hours u = null;
       try {
    	   Session session=HibernateUtil.getDBSession();
	       HibernateUtil.beginTransaction();
	       Criteria c=session.createCriteria(getClass());
	       c.add(Restrictions.eq("idHours", id));
	       u=(Hours) c.uniqueResult();
           HibernateUtil.commitTransaction();
       } catch (Exception e) {
    	   e.printStackTrace();
    	   String err="An error occurs while try to get elements";
    	   System.err.println(err);
       }finally{
    	   HibernateUtil.closeSession();
       }
       return u;
	}
	
	@Override
	public boolean equals(Object c) {
		Hours t = this;
		boolean bRet = false;
		if (!(c instanceof Hours)) {
			return false;
		}
		Hours x = (Hours) c;
		if (x != null && x.getIdhours().equals(t.getIdhours())) {
			bRet = true;
		}
		return bRet;
	}

	public Integer getIdhours() {
		return idhours;
	}

	public Integer getMonday() {
		return monday;
	}

	public Integer getThuesday() {
		return thuesday;
	}

	public Integer getWednesday() {
		return wednesday;
	}

	public Integer getThursday() {
		return thursday;
	}

	public Integer getFriday() {
		return friday;
	}

	public Boolean getActive() {
		return active;
	}

	public Timesheet getTimesheet() {
		return timesheet;
	}

	public void setIdhours(Integer idhours) {
		this.idhours = idhours;
	}

	public void setMonday(Integer monday) {
		this.monday = monday;
	}

	public void setThuesday(Integer thuesday) {
		this.thuesday = thuesday;
	}

	public void setWednesday(Integer wednesday) {
		this.wednesday = wednesday;
	}

	public void setThursday(Integer thursday) {
		this.thursday = thursday;
	}

	public void setFriday(Integer friday) {
		this.friday = friday;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	public void setTimesheet(Timesheet timesheet) {
		this.timesheet = timesheet;
	}

	public List<Hours> getAllHourss() {
		return getList(0, 0, true);

	}

	public List<Hours> getList(int firstResult, int maxResult) {
		return getList(firstResult, maxResult, false);
	}

	private List<Hours> getList(int firstResult, int maxResult, boolean all) {
		List<Hours> lRet = new ArrayList<Hours>();
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			Criteria c=session.createCriteria(getClass());
			c.add(Restrictions.eq("active", Boolean.TRUE));
			
			if (!all) {
				c.setFirstResult(firstResult);
				c.setMaxResults(maxResult);
			}
			lRet = c.list();
			HibernateUtil.commitTransaction();
		} catch (Exception e) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to get Hours elements");
			System.out.println(e);
		} finally {
			HibernateUtil.closeSession();
		}
		return lRet;
	}

	public boolean save() {
		boolean bRet = false;
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			session.save(this);
			HibernateUtil.commitTransaction();
			bRet = true;
		} catch (Exception ex) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to save current element");
			System.out.println(ex);
		} finally {
			HibernateUtil.closeSession();
		}
		return bRet;
	}

	public boolean update() {
		boolean bRet = false;
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			session.update(this);
			HibernateUtil.commitTransaction();
			bRet = true;
		} catch (Exception ex) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to update current object");
		} finally {
			HibernateUtil.closeSession();
		}
		return bRet;
	}

	public boolean delete() {
		boolean bRet = false;
		Session session = null;
		try {
			session = HibernateUtil.getDBSession();
			HibernateUtil.beginTransaction();
			setActive(Boolean.FALSE);
			session.update(this);
			HibernateUtil.commitTransaction();
			bRet = true;
		} catch (Exception ex) {
			try {
				HibernateUtil.rollBackTransaction();
			} catch (Exception ex1) {
				System.err
						.println("An error occurs while try to do rollback on transaction");
			}
			System.err
					.println("An error occurs while try to delete current object");
		} finally {
			HibernateUtil.closeSession();
		}
		return bRet;
	}
}
